FROM base AS web-base
WORKDIR /app/web

COPY web/ ./

# DATABASE_URL is already available from base image, no need to redeclare
RUN echo "DATABASE_URL from base: $DATABASE_URL"

# Inject envs for Next.js runtime at build time
ARG REDIS_URL
ENV REDIS_URL=$REDIS_URL
ARG PAYPAL_CLIENT_ID
ENV PAYPAL_CLIENT_ID=$PAYPAL_CLIENT_ID
ARG PAYPAL_CLIENT_SECRET
ENV PAYPAL_CLIENT_SECRET=$PAYPAL_CLIENT_SECRET
ARG PAYPAL_MODE
ENV PAYPAL_MODE=$PAYPAL_MODE
ARG PAYPAL_BASE_URL
ENV PAYPAL_BASE_URL=$PAYPAL_BASE_URL
ARG AWS_REGION
ENV AWS_REGION=$AWS_REGION
ARG AWS_ACCESS_KEY_ID
ENV AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
ARG AWS_SECRET_ACCESS_KEY
ENV AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
ARG AWS_S3_BUCKET_NAME
ENV AWS_S3_BUCKET_NAME=$AWS_S3_BUCKET_NAME

ARG TRUSTED_ORIGINS
ENV TRUSTED_ORIGINS=$TRUSTED_ORIGINS

# Also inject the public plan IDs if you have them
ARG NEXT_PUBLIC_APP_URL
ENV NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL
ARG NEXT_PUBLIC_PAYPAL_STARTER_PLAN_ID
ENV NEXT_PUBLIC_PAYPAL_STARTER_PLAN_ID=$NEXT_PUBLIC_PAYPAL_STARTER_PLAN_ID
ARG NEXT_PUBLIC_PAYPAL_PROFESSIONAL_PLAN_ID
ENV NEXT_PUBLIC_PAYPAL_PROFESSIONAL_PLAN_ID=$NEXT_PUBLIC_PAYPAL_PROFESSIONAL_PLAN_ID
ARG NEXT_PUBLIC_PAYPAL_ENTERPRISE_PLAN_ID
ENV NEXT_PUBLIC_PAYPAL_ENTERPRISE_PLAN_ID=$NEXT_PUBLIC_PAYPAL_ENTERPRISE_PLAN_ID
ARG NEXT_PUBLIC_AWS_S3_BUCKET_NAME
ENV NEXT_PUBLIC_AWS_S3_BUCKET_NAME=$NEXT_PUBLIC_AWS_S3_BUCKET_NAME
ARG NEXT_PUBLIC_AWS_REGION
ENV NEXT_PUBLIC_AWS_REGION=$NEXT_PUBLIC_AWS_REGION

RUN pnpm install

# CRITICAL: Re-generate Prisma client with latest schema before build
WORKDIR /app/packages/database
RUN echo "ðŸ”§ Generating Prisma client with latest schema..."
RUN pnpm prisma generate

# Now build the Next.js app with updated Prisma client
WORKDIR /app/web
RUN echo "ðŸ“¦ Building Next.js application..."
RUN pnpm run build

CMD ["pnpm", "start"]