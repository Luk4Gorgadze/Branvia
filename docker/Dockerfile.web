FROM node:18-alpine

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm && apk add --no-cache openssl bash python3 make g++

# Workspace root files
COPY pnpm-workspace.yaml ./
COPY package.json ./

# Copy packages and web app
COPY packages ./packages
COPY web ./web

# Install workspace deps
RUN pnpm install

# Inject envs for Next.js build-time if needed
ARG DATABASE_URL
ENV DATABASE_URL=$DATABASE_URL
ARG REDIS_URL
ENV REDIS_URL=$REDIS_URL
ARG PAYPAL_CLIENT_ID
ENV PAYPAL_CLIENT_ID=$PAYPAL_CLIENT_ID
ARG PAYPAL_CLIENT_SECRET
ENV PAYPAL_CLIENT_SECRET=$PAYPAL_CLIENT_SECRET
ARG PAYPAL_MODE
ENV PAYPAL_MODE=$PAYPAL_MODE
ARG PAYPAL_BASE_URL
ENV PAYPAL_BASE_URL=$PAYPAL_BASE_URL
ARG AWS_REGION
ENV AWS_REGION=$AWS_REGION
ARG AWS_ACCESS_KEY_ID
ENV AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
ARG AWS_SECRET_ACCESS_KEY
ENV AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
ARG AWS_S3_BUCKET_NAME
ENV AWS_S3_BUCKET_NAME=$AWS_S3_BUCKET_NAME
ARG TRUSTED_ORIGINS
ENV TRUSTED_ORIGINS=$TRUSTED_ORIGINS
ARG NEXT_PUBLIC_APP_URL
ENV NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL
ARG NEXT_PUBLIC_PAYPAL_STARTER_PLAN_ID
ENV NEXT_PUBLIC_PAYPAL_STARTER_PLAN_ID=$NEXT_PUBLIC_PAYPAL_STARTER_PLAN_ID
ARG NEXT_PUBLIC_PAYPAL_PROFESSIONAL_PLAN_ID
ENV NEXT_PUBLIC_PAYPAL_PROFESSIONAL_PLAN_ID=$NEXT_PUBLIC_PAYPAL_PROFESSIONAL_PLAN_ID
ARG NEXT_PUBLIC_PAYPAL_ENTERPRISE_PLAN_ID
ENV NEXT_PUBLIC_PAYPAL_ENTERPRISE_PLAN_ID=$NEXT_PUBLIC_PAYPAL_ENTERPRISE_PLAN_ID
ARG NEXT_PUBLIC_AWS_S3_BUCKET_NAME
ENV NEXT_PUBLIC_AWS_S3_BUCKET_NAME=$NEXT_PUBLIC_AWS_S3_BUCKET_NAME
ARG NEXT_PUBLIC_AWS_REGION
ENV NEXT_PUBLIC_AWS_REGION=$NEXT_PUBLIC_AWS_REGION

# Generate Prisma client (no DB access required)
WORKDIR /app/packages/database
RUN echo "ðŸ”§ Generating Prisma client with latest schema..." && pnpm prisma generate

# Apply database migrations during build (requires DATABASE_URL)
RUN echo "ðŸ”„ Applying Prisma migrations..." && pnpm prisma migrate deploy

# Build Next.js app
WORKDIR /app/web
RUN echo "ðŸ“¦ Building Next.js application..." && pnpm run build

CMD ["pnpm", "start"]